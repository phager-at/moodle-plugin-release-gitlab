stages:
  - test
  - deploy
  - release
  
variables:
  DB: "mysqli"
  MYSQL_ROOT_PASSWORD: "superrootpass"
  TRAVIS_BUILD_DIR: "$CI_PROJECT_DIR"
  MOODLE_DIR: "/var/www/html/moodle"
  # If we want to ignore some templates, provide them here.
  #MUSTACHE_IGNORE_NAMES: "<file>.mustache, <file2>.mustache, ..., <filen>.mustache"
  PLUGIN: 'plugintype_pluginname' # TODO: YOU HAVE TO CHANGE THIS.


.job_template: &job_definition
  allow_failure: true
  cache:
    paths:
      - $HOME/.composer/cache
      - $HOME/.npm
  image: moodlehq/moodle-php-apache:7.4
  stage: test
  services:
    - mysql:5.7
  script:
    # Update packages and install git, mysql-client and npm.
    - apt update && apt install -y git default-mysql-client npm
    # Install old version of openjdk-8 in due of MDLSITE-5739.
    - mkdir -p /usr/share/man/man1 #https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863199
    - apt install -y software-properties-common
    - add-apt-repository --yes 'deb http://security.debian.org/debian-security stretch/updates main'
    - apt update && apt install -y openjdk-8-jdk-headless
    - java -version
    # Install nvm and NodeJS.
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
    - source $HOME/.nvm/nvm.sh
    - nvm install 14.2.0
    # Install composer.
    - curl -sS https://getcomposer.org/installer | php
    - mv composer.phar /usr/local/bin/composer
    # Install Moodle CI plugin
    # Hint: moodle-plugin-ci already exists but has some missing commands, therefore we re-install it.
    - cd $HOME && rm -rf ci
    - composer create-project -n --no-dev --prefer-dist moodlehq/moodle-plugin-ci ci ^3
    - export PATH="$(cd $HOME/ci/bin; pwd):$(cd $HOME/ci/vendor/bin; pwd):$PATH"
    - chmod u+x $HOME/ci/bin/moodle-plugin-ci
    - chmod u+x $HOME/ci/bin/*
    - umask u+x
    - cd $CI_PROJECT_DIR/..
    - moodle-plugin-ci install --moodle=$MOODLE_DIR --db-user=root --db-pass=superrootpass --db-host=mysql -vvv
    - moodle-plugin-ci phplint
    - moodle-plugin-ci phpcpd || true
    - moodle-plugin-ci phpmd
    - moodle-plugin-ci codechecker
    - moodle-plugin-ci validate
    - moodle-plugin-ci savepoints
    - moodle-plugin-ci mustache
    - moodle-plugin-ci grunt
    - moodle-plugin-ci phpdoc || true
    - moodle-plugin-ci phpunit
    - moodle-plugin-ci behat

# Add more versions if you want/need.
Moodle 3.11:
  <<: *job_definition
  variables:
    MOODLE_BRANCH: "MOODLE_311_STABLE"

Moodle 3.10:
  <<: *job_definition
  variables:
    MOODLE_BRANCH: "MOODLE_310_STABLE"

    #The deploy will create the release in Gitlab. This is required after a tag has been created
deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script:
    - echo 'running deploy to create release in Gitlab'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: './CHANGES.md'  # Just read the changes from changes.md
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'

# After the deploy has been done, it's ready to be released to Moodle.org.
release:
  image: php:7.4-cli
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Releasing this to Moodle.org"
    - apt-get update
    - apt-get -y install zip curl jq
    - mkdir -p /tmp/release/$PLUGIN
    - cp -Rfv ./ /tmp/release/$PLUGIN/
    - cd /tmp/release
    - zip -r /tmp/newbuild.zip ./ -x '*.git*'
    - ITEMID=$(curl -s -F data=@/tmp/newbuild.zip "https://moodle.org/webservice/upload.php?token=$MOODLE_ORG_TOKEN" | jq --raw-output '.[0].itemid')
    - curl -s https://moodle.org/webservice/rest/server.php --data-urlencode "wstoken=${MOODLE_ORG_TOKEN}" --data-urlencode "wsfunction=local_plugins_add_version" --data-urlencode "moodlewsrestformat=json" --data-urlencode "frankenstyle=${PLUGIN}" --data-urlencode "zipdrafitemtid=${ITEMID}" | jq

